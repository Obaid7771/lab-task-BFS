# -*- coding: utf-8 -*-
"""BFS lab task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18FvpqvRQZP5X2UUsosxYLjZCaQsRehOe
"""

# graph of cities in pak
pakistan_cities = {
    'karachi': ['hyderabad','quetta'],
    'hyderabad': ['karachi','sukkur','multan'],
    'quetta': ['karachi','sukkur'],
    'sukkur': ['hyderabad','quetta','multan','islamabad'],
    'multan': ['hyderabad','sukkur','lahore'],
    'islamabad':['sukkur','lahore','peshawar'],
    'lahore':['multan','islamabad','faisalabad'],
    'faisalabad':['lahore'],
    'peshawar':['islamabad'],
}

def bfs(graph,start,goal):
  # queue for bsf

  queue = deque([(start,[start])]) # (current_node,path)
  visited = set() # to keep the track of visited nodes

  while queue:
    current,path = queue.popleft() # dequeue the front node
    if current == goal:
      return path # return the path if goal is reached

      if current not in visited:
        visited.add(current) # mark the node as visited

        #enqueue all unvisited neighbours
        for neighhbor in graph[current]:
          if neighbor not in visited:
            queue.append((neighbor,path + [neighbor ]))

            return None # if no path is found

            # test bfs
            start_sity ='karachi'
            goal_city = 'lahore'
            bfs_path = bfs(pakistan_cities,start_city,goal_city)
            print("bfs path from {start_city} to {goal_city}:{bfs_path}")

# graph of cities in pak
pakistan_cities = {
    'karachi': ['hyderabad','quetta'],
    'hyderabad': ['karachi','sukkur','multan'],
    'quetta': ['karachi','sukkur'],
    'sukkur': ['hyderabad','quetta','multan','islamabad'],
    'multan': ['hyderabad','sukkur','lahore'],
    'islamabad':['sukkur','lahore','peshawar'],
    'lahore':['multan','islamabad','faisalabad'],
    'faisalabad':['lahore'],
    'peshawar':['islamabad'],
}

def bfs(graph,start,goal):
  # queue for bsf

  queue = deque([(start,[start])]) # (current_node,path)
  visited = set() # to keep the track of visited nodes

  while queue:
    current,path = queue.popleft() # dequeue the front node
    if current == goal:
      return path # return the path if goal is reached

      if current not in visited:
        visited.add(current) # mark the node as visited

        #enqueue all unvisited neighbours
        for neighhbor in graph[current]:
          if neighbor not in visited:
            queue.append((neighbor,path + [neighbor ]))

            return None # if no path is found

            # test bfs
            start_sity ='karachi'
            goal_city = 'lahore'
            bfs_path = bfs(pakistan_cities,start_city,goal_city)
            print("bfs path from {start_city} to {goal_city}:{bfs_path}")